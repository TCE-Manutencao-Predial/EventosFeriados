#!/usr/bin/env python3
"""
Teste para validar notifica√ß√µes de cancelamento de eventos.
"""

import logging
from datetime import datetime, timedelta

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(name)s] %(levelname)s: %(message)s'
)

def test_cancelamento_evento():
    """Testa cria√ß√£o e cancelamento de evento com notifica√ß√£o"""
    from app.utils.GerenciadorEventos import GerenciadorEventos
    
    print("=== TESTE: Cancelamento de Evento com Notifica√ß√£o ===")
    print(f"In√≠cio do teste: {datetime.now()}")
    
    # Criar evento de teste
    amanha = datetime.now() + timedelta(days=1)
    evento_teste = {
        'nome': f'TESTE Cancelamento - {datetime.now().strftime("%H:%M:%S")}',
        'local': 'Audit√≥rio Nobre',
        'dia': amanha.day,
        'mes': amanha.month,
        'ano': amanha.year,
        'hora_inicio': '10:00',
        'hora_fim': '12:00',
        'responsavel': 'Sistema de Teste',
        'observacoes': 'Evento de teste para validar notifica√ß√£o de cancelamento'
    }
    
    try:
        # 1. Criar evento
        print("\n1Ô∏è‚É£ Criando evento...")
        gerenciador = GerenciadorEventos.get_instance()
        novo_evento = gerenciador.adicionar_evento(evento_teste)
        evento_id = novo_evento['id']
        print(f"   ‚úÖ Evento criado com ID: {evento_id}")
        print(f"   üìù Nome: {novo_evento['nome']}")
        
        # Aguardar um pouco para simular uso real
        import time
        time.sleep(2)
        
        # 2. Cancelar/remover evento
        print("\n2Ô∏è‚É£ Cancelando evento...")
        sucesso = gerenciador.remover_evento(evento_id)
        
        if sucesso:
            print("   ‚úÖ Evento cancelado com sucesso!")
            print("   üì± Notifica√ß√£o de cancelamento: Enviando em background...")
        else:
            print("   ‚ùå Falha ao cancelar evento")
            return False
        
        # 3. Verificar se evento foi removido
        print("\n3Ô∏è‚É£ Verificando remo√ß√£o...")
        todos_eventos = gerenciador.listar_eventos()
        evento_ainda_existe = any(e['id'] == evento_id for e in todos_eventos)
        
        if not evento_ainda_existe:
            print("   ‚úÖ Evento foi removido do sistema")
        else:
            print("   ‚ùå Evento ainda existe no sistema")
            return False
        
        print(f"\n‚úÖ TESTE CONCLU√çDO COM SUCESSO!")
        print("üìù Observa√ß√µes:")
        print("   ‚Ä¢ Evento foi criado e removido corretamente")
        print("   ‚Ä¢ Notifica√ß√µes foram enviadas em background (cria√ß√£o + cancelamento)")
        print("   ‚Ä¢ Interface permaneceu responsiva")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

if __name__ == "__main__":
    print("üß™ TESTE DE NOTIFICA√á√ÉO DE CANCELAMENTO")
    print("=" * 50)
    
    success = test_cancelamento_evento()
    
    print("\n" + "=" * 50)
    if success:
        print("üéØ RESULTADO: Funcionalidade implementada com sucesso!")
        print("üí° Agora quando um evento for exclu√≠do na interface web,")
        print("   os t√©cnicos receber√£o notifica√ß√£o WhatsApp do cancelamento.")
    else:
        print("‚ùå RESULTADO: Problemas encontrados no teste.")
