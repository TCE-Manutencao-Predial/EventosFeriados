#!/usr/bin/env python3
"""
Script de teste para o sistema de notifica√ß√µes de eventos.

Este script permite testar:
1. O envio de notifica√ß√µes quando um evento √© criado
2. O envio de lembretes de eventos
3. A listagem de t√©cnicos com fun√ß√£o EVENTOS
"""

import sys
import os
from datetime import datetime, timedelta

# Adiciona o diret√≥rio raiz ao path para importar os m√≥dulos
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.utils.GerenciadorNotificacaoEventos import GerenciadorNotificacaoEventos
from app.alarmes.ClassesSistema import FuncoesTecnicos

def testar_listagem_tecnicos():
    """Testa a listagem de t√©cnicos com fun√ß√£o EVENTOS"""
    print("=" * 60)
    print("TESTE: Listagem de t√©cnicos com fun√ß√£o EVENTOS")
    print("=" * 60)
    
    gerenciador = GerenciadorNotificacaoEventos.get_instance()
    tecnicos_eventos = gerenciador.obter_tecnicos_eventos()
    
    if not tecnicos_eventos:
        print("‚ùå Nenhum t√©cnico com fun√ß√£o EVENTOS encontrado!")
        return False
    
    print(f"‚úÖ Encontrados {len(tecnicos_eventos)} t√©cnicos com fun√ß√£o EVENTOS:")
    for i, tecnico in enumerate(tecnicos_eventos, 1):
        print(f"  {i}. {tecnico.nome}")
        print(f"     üìû {tecnico.telefone}")
        print(f"     ‚úâÔ∏è  {tecnico.email}")
        print(f"     üïí Jornada: {tecnico.jornada}")
        print(f"     üì≤ M√©todo preferencial: {tecnico.metodo_contato_preferencial.name}")
        print()
    
    return True

def criar_evento_teste():
    """Cria um evento de teste para as notifica√ß√µes"""
    amanha = datetime.now() + timedelta(days=1)
    
    evento_teste = {
        'id': f"teste_{int(datetime.now().timestamp())}",
        'nome': 'Reuni√£o de Teste - Sistema de Notifica√ß√µes',
        'descricao': 'Evento criado para testar o sistema de notifica√ß√µes autom√°ticas.',
        'local': 'Audit√≥rio Nobre',
        'dia': amanha.day,
        'mes': amanha.month,
        'ano': amanha.year,
        'hora_inicio': '14:00',
        'hora_fim': '16:00',
        'responsavel': 'Sistema de Testes',
        'participantes_estimados': 50,
        'criado_em': datetime.now().isoformat(),
        'atualizado_em': datetime.now().isoformat()
    }
    
    return evento_teste

def testar_notificacao_evento_criado():
    """Testa o envio de notifica√ß√£o quando um evento √© criado"""
    print("=" * 60)
    print("TESTE: Notifica√ß√£o de evento criado")
    print("=" * 60)
    
    evento_teste = criar_evento_teste()
    
    print(f"üìÖ Evento de teste:")
    print(f"   Nome: {evento_teste['nome']}")
    print(f"   Data: {evento_teste['dia']:02d}/{evento_teste['mes']:02d}/{evento_teste['ano']}")
    print(f"   Hor√°rio: {evento_teste['hora_inicio']} √†s {evento_teste['hora_fim']}")
    print(f"   Local: {evento_teste['local']}")
    print()
    
    gerenciador = GerenciadorNotificacaoEventos.get_instance()
    sucesso = gerenciador.notificar_evento_criado(evento_teste)
    
    if sucesso:
        print("‚úÖ Notifica√ß√£o de evento criado enviada com sucesso!")
    else:
        print("‚ùå Falha ao enviar notifica√ß√£o de evento criado!")
    
    return sucesso

def testar_lembrete_evento():
    """Testa o envio de lembrete de evento"""
    print("=" * 60)
    print("TESTE: Lembrete de evento")
    print("=" * 60)
    
    evento_teste = criar_evento_teste()
    
    print(f"üìÖ Evento de teste para lembrete:")
    print(f"   Nome: {evento_teste['nome']}")
    print(f"   Data: {evento_teste['dia']:02d}/{evento_teste['mes']:02d}/{evento_teste['ano']}")
    print(f"   Hor√°rio: {evento_teste['hora_inicio']} √†s {evento_teste['hora_fim']}")
    print(f"   Local: {evento_teste['local']}")
    print()
    
    gerenciador = GerenciadorNotificacaoEventos.get_instance()
    
    # Simula o envio de lembrete (normalmente seria √†s 8h do dia anterior)
    print("‚ö†Ô∏è  ATEN√á√ÉO: Este teste simula o envio de lembrete independente do hor√°rio atual.")
    print("   Em produ√ß√£o, lembretes s√£o enviados apenas √†s 8h00 do dia anterior ao evento.")
    print()
    
    try:
        if gerenciador.notificacao_eventos:
            gerenciador.notificacao_eventos.notificar_lembrete_evento(evento_teste)
            print("‚úÖ Lembrete de evento enviado com sucesso!")
            return True
        else:
            print("‚ùå Sistema de notifica√ß√£o n√£o est√° inicializado!")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao enviar lembrete: {e}")
        return False

def testar_verificacao_manual_lembretes():
    """Testa a verifica√ß√£o manual de lembretes para amanh√£"""
    print("=" * 60)
    print("TESTE: Verifica√ß√£o manual de lembretes")
    print("=" * 60)
    
    print("üîç Verificando eventos para amanh√£...")
    
    gerenciador = GerenciadorNotificacaoEventos.get_instance()
    
    try:
        gerenciador.verificar_lembretes_manualmente()
        print("‚úÖ Verifica√ß√£o manual de lembretes executada!")
        print("   (Se houver eventos para amanh√£, os lembretes foram enviados)")
        return True
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o manual: {e}")
        return False

def main():
    """Fun√ß√£o principal do script de teste"""
    print("üß™ SISTEMA DE TESTE - NOTIFICA√á√ïES DE EVENTOS")
    print("=" * 60)
    print("Este script testar√° o sistema de notifica√ß√µes de eventos.")
    print("As notifica√ß√µes ser√£o enviadas apenas para t√©cnicos com fun√ß√£o EVENTOS.")
    print()
    
    # Lista os testes dispon√≠veis
    testes = [
        ("1", "Listar t√©cnicos com fun√ß√£o EVENTOS", testar_listagem_tecnicos),
        ("2", "Testar notifica√ß√£o de evento criado", testar_notificacao_evento_criado),
        ("3", "Testar lembrete de evento", testar_lembrete_evento),
        ("4", "Verificar lembretes para amanh√£", testar_verificacao_manual_lembretes),
        ("5", "Executar todos os testes", None)
    ]
    
    while True:
        print("\nüìã TESTES DISPON√çVEIS:")
        for opcao, descricao, _ in testes:
            print(f"   {opcao}. {descricao}")
        print("   0. Sair")
        
        escolha = input("\nüî¢ Escolha uma op√ß√£o: ").strip()
        
        if escolha == "0":
            print("\nüëã Saindo do sistema de testes...")
            break
        elif escolha == "5":
            print("\nüöÄ Executando todos os testes...")
            for opcao, descricao, funcao in testes[:-1]:  # Exclui a op√ß√£o "todos"
                if funcao:
                    print(f"\n‚ñ∂Ô∏è  Executando: {descricao}")
                    funcao()
                    input("\n‚è∏Ô∏è  Pressione Enter para continuar...")
        else:
            # Procura o teste espec√≠fico
            teste_encontrado = False
            for opcao, descricao, funcao in testes:
                if escolha == opcao and funcao:
                    print(f"\n‚ñ∂Ô∏è  Executando: {descricao}")
                    funcao()
                    teste_encontrado = True
                    break
            
            if not teste_encontrado:
                print("\n‚ùå Op√ß√£o inv√°lida! Tente novamente.")
            else:
                input("\n‚è∏Ô∏è  Pressione Enter para continuar...")

if __name__ == "__main__":
    main()
