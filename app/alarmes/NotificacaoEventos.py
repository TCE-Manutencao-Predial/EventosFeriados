import logging
from datetime import datetime
from app.alarmes.ClassesSistema import Tecnico, MetodoContato, FuncoesTecnicos, ConfigNotificacao
from app.utils.GerenciadorFeriados import GerenciadorFeriados
from typing import List
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import requests
import threading
import time
import socket
from app.config import WHATSAPP_API

logger = logging.getLogger('EventosFeriados')

class NotificacaoEventos:
    """
    Classe respons√°vel por enviar notifica√ß√µes aos t√©cnicos sobre eventos.
    
    A classe foi adaptada do sistema de alarmes para trabalhar especificamente
    com notifica√ß√µes de eventos, notificando t√©cnicos assim que eventos s√£o
    inclu√≠dos no sistema e tamb√©m um dia antes do evento √†s 8h00.

    Atributos:
        config_notificacao (ConfigNotificacao): Configura√ß√µes sobre a forma de notifica√ß√£o.
        tecnicos (List[Tecnico]): Lista de t√©cnicos que podem receber as notifica√ß√µes.
        metodo_notificacao (MetodoContato): M√©todo de contato a ser utilizado.
    """

    def __init__(
        self,
        config_notificacao: ConfigNotificacao,
        tecnicos: List[Tecnico],
        metodo_notificacao: MetodoContato = MetodoContato.WHATSAPP
    ):
        """
        Construtor da classe NotificacaoEventos.

        Args:
            config_notificacao (ConfigNotificacao): Objeto com configura√ß√µes de notifica√ß√£o.
            tecnicos (List[Tecnico]): Lista de inst√¢ncias da classe Tecnico.
            metodo_notificacao (MetodoContato, optional): M√©todo de contato (Enum). 
                Por padr√£o, utiliza 'MetodoContato.WHATSAPP'.
        """
        self.config_notificacao = config_notificacao
        self.tecnicos = tecnicos
        self.metodo_notificacao = metodo_notificacao
        self.gerenciador_feriados = GerenciadorFeriados()

    def verificar_disponibilidade_tecnico(self, tecnico: Tecnico, agora: datetime) -> bool:
        """
        Verifica se o t√©cnico est√° dispon√≠vel no momento atual, considerando:
            - Se est√° de f√©rias (ferias=True).
            - Se h√° hor√°rios (jornada) definidos e se o hor√°rio atual est√° dentro de algum
              dos intervalos v√°lidos, inclusive levando em conta turnos que ultrapassam a meia-noite.
        
        Args:
            tecnico (Tecnico): O t√©cnico a ser verificado.
            agora (datetime): Data e hora de refer√™ncia para a checagem.
        
        Returns:
            bool: True se o t√©cnico est√° dispon√≠vel, False caso contr√°rio.
        """
        if tecnico.ferias:
            logger.debug(f"T√©cnico {tecnico.nome} est√° de f√©rias.")
            return False
        if not tecnico.jornada:
            logger.debug(f"T√©cnico {tecnico.nome} n√£o tem jornada definida, assumindo dispon√≠vel.")
            return True

        now_time = agora.time()
        for inicio_str, fim_str in tecnico.jornada:
            inicio = datetime.strptime(inicio_str, '%H:%M').time()
            fim = datetime.strptime(fim_str, '%H:%M').time()

            if inicio <= fim:
                if inicio <= now_time <= fim:
                    logger.debug(f"T√©cnico {tecnico.nome} est√° dispon√≠vel no intervalo {inicio} - {fim}.")
                    return True
            else:
                if now_time >= inicio or now_time <= fim:
                    logger.debug(f"T√©cnico {tecnico.nome} est√° dispon√≠vel no turno noturno {inicio} - {fim}.")
                    return True

        logger.debug(f"T√©cnico {tecnico.nome} n√£o est√° dispon√≠vel agora.")
        return False

    def verificar_horario_data_alarme(self, agora: datetime) -> bool:
        """
        Verifica se o sistema est√° dentro do hor√°rio e dia configurados
        para disparar notifica√ß√µes. Feriados s√£o considerados como finais de semana.

        Args:
            agora (datetime): Data e hora atuais para verificar compatibilidade com as configura√ß√µes.
        
        Returns:
            bool: True se est√° dentro do hor√°rio de disparo, False caso contr√°rio.
        """
        feriado = self.gerenciador_feriados.verificar_feriado(agora.day, agora.month, agora.year)
        eh_feriado = feriado is not None
        if eh_feriado:
            logger.debug(f"Data atual √© feriado: {feriado.get('nome', 'Feriado')}")
            
        dia_semana = agora.weekday()
        eh_final_semana = dia_semana >= 5 or eh_feriado
        
        if eh_final_semana:
            if not self.config_notificacao.disparar_finais_semana:
                logger.debug("Config indica para n√£o disparar em finais de semana ou feriados.")
                return False
            horario_inicio_str, horario_fim_str = self.config_notificacao.horario_finais_semana
        else:
            if not self.config_notificacao.disparar_dias_semana:
                logger.debug("Config indica para n√£o disparar em dias de semana.")
                return False
            horario_inicio_str, horario_fim_str = self.config_notificacao.horario_dias_semana

        horario_inicio = datetime.strptime(horario_inicio_str, '%H:%M').time()
        horario_fim = datetime.strptime(horario_fim_str, '%H:%M').time()
        now_time = agora.time()

        if horario_inicio <= horario_fim:
            dentro_horario = horario_inicio <= now_time <= horario_fim
        else:
            dentro_horario = now_time >= horario_inicio or now_time <= horario_fim

        logger.debug(f"Verificando disponibilidade geral: {'dentro' if dentro_horario else 'fora'} do hor√°rio.")
        return dentro_horario

    def notificar_evento_criado(self, evento_dados: dict) -> None:
        """
        Notifica t√©cnicos assim que um evento √© criado no sistema.
        
        Args:
            evento_dados (dict): Dados do evento que foi criado.
        """
        agora = datetime.now()
        
        # Verifica se est√° no hor√°rio de notifica√ß√£o
        if not self.verificar_horario_data_alarme(agora):
            logger.info("Fora do hor√°rio de notifica√ß√£o para eventos criados.")
            return

        # Filtra t√©cnicos com fun√ß√£o EVENTOS
        tecnicos_eventos = [
            tecnico for tecnico in self.tecnicos 
            if FuncoesTecnicos.EVENTOS in tecnico.funcoes
        ]

        if not tecnicos_eventos:
            logger.info("Nenhum t√©cnico com fun√ß√£o EVENTOS encontrado.")
            return

        # Monta mensagem de evento criado
        data_evento = f"{evento_dados['dia']:02d}/{evento_dados['mes']:02d}/{evento_dados['ano']}"
        mensagem = (
            f"üóìÔ∏è *NOVO EVENTO CADASTRADO*\n\n"
            f"üìã *Evento:* {evento_dados['nome']}\n"
            f"üìÖ *Data:* {data_evento}\n"
            f"üïí *Hor√°rio:* {evento_dados['hora_inicio']} √†s {evento_dados['hora_fim']}\n"
            f"üìç *Local:* {evento_dados['local']}\n"
            f"üë§ *Respons√°vel:* {evento_dados.get('responsavel', 'N√£o informado')}\n"
            f"üë• *Participantes:* {evento_dados.get('participantes_estimados', 'N√£o informado')}\n\n"
            f"‚ÑπÔ∏è Um lembrete ser√° enviado 1 dia antes do evento √†s 08:00h."
        )

        self.enviar_notificacao_para_tecnicos(mensagem, tecnicos_eventos)

    def notificar_evento_cancelado(self, evento_dados: dict) -> None:
        """
        Notifica t√©cnicos quando um evento √© cancelado/removido do sistema.
        
        Args:
            evento_dados (dict): Dados do evento que foi cancelado.
        """
        agora = datetime.now()
        
        # Verifica se est√° no hor√°rio de notifica√ß√£o
        if not self.verificar_horario_data_alarme(agora):
            logger.info("Fora do hor√°rio de notifica√ß√£o para eventos cancelados.")
            return

        # Filtra t√©cnicos com fun√ß√£o EVENTOS
        tecnicos_eventos = [
            tecnico for tecnico in self.tecnicos 
            if FuncoesTecnicos.EVENTOS in tecnico.funcoes
        ]

        if not tecnicos_eventos:
            logger.info("Nenhum t√©cnico com fun√ß√£o EVENTOS encontrado.")
            return

        # Monta mensagem de evento cancelado
        data_evento = f"{evento_dados['dia']:02d}/{evento_dados['mes']:02d}/{evento_dados['ano']}"
        mensagem = (
            f"‚ùå *EVENTO CANCELADO*\n\n"
            f"üìã *Evento:* {evento_dados['nome']}\n"
            f"üìÖ *Data:* {data_evento}\n"
            f"üïí *Hor√°rio:* {evento_dados['hora_inicio']} √†s {evento_dados['hora_fim']}\n"
            f"üìç *Local:* {evento_dados['local']}\n"
            f"üë§ *Respons√°vel:* {evento_dados.get('responsavel', 'N√£o informado')}\n\n"
            f"‚ö†Ô∏è Este evento foi removido do sistema e n√£o acontecer√° mais."
        )

        self.enviar_notificacao_para_tecnicos(mensagem, tecnicos_eventos)

    def notificar_lembrete_evento(self, evento_dados: dict) -> None:
        """
        Envia lembrete do evento um dia antes √†s 8h00.
        
        Args:
            evento_dados (dict): Dados do evento que acontecer√° amanh√£.
        """
        agora = datetime.now()
        
        # Verifica se √© aproximadamente 8h00 (toler√¢ncia de 30 minutos)
        if not (7.5 <= agora.hour + agora.minute/60 <= 8.5):
            logger.debug("N√£o est√° no hor√°rio de lembrete (08:00h ¬±30min).")
            return

        # Filtra t√©cnicos com fun√ß√£o EVENTOS
        tecnicos_eventos = [
            tecnico for tecnico in self.tecnicos 
            if FuncoesTecnicos.EVENTOS in tecnico.funcoes
        ]

        if not tecnicos_eventos:
            logger.info("Nenhum t√©cnico com fun√ß√£o EVENTOS encontrado para lembrete.")
            return

        # Monta mensagem de lembrete
        data_evento = f"{evento_dados['dia']:02d}/{evento_dados['mes']:02d}/{evento_dados['ano']}"
        mensagem = (
            f"‚è∞ *LEMBRETE DE EVENTO - AMANH√É*\n\n"
            f"üìã *Evento:* {evento_dados['nome']}\n"
            f"üìÖ *Data:* {data_evento} (AMANH√É)\n"
            f"üïí *Hor√°rio:* {evento_dados['hora_inicio']} √†s {evento_dados['hora_fim']}\n"
            f"üìç *Local:* {evento_dados['local']}\n"
            f"üë§ *Respons√°vel:* {evento_dados.get('responsavel', 'N√£o informado')}\n"
            f"üë• *Participantes:* {evento_dados.get('participantes_estimados', 'N√£o informado')}\n\n"
            f"‚ö†Ô∏è Verifique se todos os equipamentos e instala√ß√µes est√£o funcionando adequadamente."
        )

        self.enviar_notificacao_para_tecnicos(mensagem, tecnicos_eventos)

    def enviar_notificacao_para_tecnicos(self, mensagem: str, tecnicos_lista: List[Tecnico]) -> None:
        """
        Envia a notifica√ß√£o para uma lista espec√≠fica de t√©cnicos.
        
        Args:
            mensagem (str): Mensagem a ser enviada.
            tecnicos_lista (List[Tecnico]): Lista de t√©cnicos para notificar.
        """
        agora = datetime.now()

        # Filtra t√©cnicos pela disponibilidade atual
        tecnicos_para_notificar = [
            tecnico for tecnico in tecnicos_lista
            if self.verificar_disponibilidade_tecnico(tecnico, agora)
        ]

        if not tecnicos_para_notificar:
            logger.info("Nenhum t√©cnico dispon√≠vel para notifica√ß√£o no momento.")
            return

        logger.debug(f"M√©todo de notifica√ß√£o escolhido: {self.metodo_notificacao.name}")

        # Novo fluxo: WhatsApp ser√° enviado em lote por fun√ß√£o via API externa.
        # Emails (se houver) continuam individuais.

        # 1) WhatsApp por fun√ß√£o (EVENTOS) usando API externa
        if any(t.metodo_contato_preferencial == MetodoContato.WHATSAPP for t in tecnicos_para_notificar):
            try:
                self.enviar_whatsapp_por_funcao(mensagem, apenas_disponiveis=True)
            except Exception as e:
                logger.error(f"Erro ao enviar WhatsApp por fun√ß√£o: {e}")

        # 2) Email individual para quem preferir EMAIL
        for tecnico in tecnicos_para_notificar:
            if tecnico.metodo_contato_preferencial == MetodoContato.EMAIL and tecnico.email:
                msg_log = (
                    f"Enviando notifica√ß√£o de evento para {tecnico.nome} via EMAIL ({tecnico.email})"
                )
                print(msg_log)
                logger.info(msg_log)
                self.enviar_email(tecnico.email, mensagem)

    def enviar_mensagem(self, contato: str, metodo: MetodoContato, mensagem: str) -> None:
        """
        Encaminha a mensagem para o m√©todo apropriado.
        
        Args:
            contato (str): Telefone ou e-mail do destinat√°rio.
            metodo (MetodoContato): M√©todo de envio (WhatsApp ou EMAIL).
            mensagem (str): Texto da mensagem a ser enviada.
        """
        hostname = socket.gethostname()
        mensagem = f"[{hostname}] {mensagem}"
        
        if metodo == MetodoContato.WHATSAPP:
            # Mantido por compatibilidade, mas agora delegamos ao envio por fun√ß√£o
            logger.debug("Preparando envio via WhatsApp por fun√ß√£o (compat)")
            self.enviar_whatsapp_por_funcao(mensagem, apenas_disponiveis=True)
        elif metodo == MetodoContato.EMAIL:
            logger.debug(f"Preparando envio de email para {contato}")
            self.enviar_email(contato, mensagem)
        else:
            logger.warning(f"M√©todo de contato desconhecido: {metodo}")

    # Vari√°veis para controlar o intervalo entre chamadas (mantido para evitar flood)
    _tempo_ultima_chamada_whatsapp = None
    _lock_api_whatsapp = threading.Lock()

    def enviar_whatsapp_por_funcao(self, mensagem: str, apenas_disponiveis: bool = True) -> None:
        """
        Envia mensagem via WhatsApp para todos os t√©cnicos com a fun√ß√£o EVENTOS
        utilizando a API p√∫blica de envio por fun√ß√£o.

        Args:
            mensagem (str): Texto a ser enviado.
            apenas_disponiveis (bool): Se True, envia apenas para quem est√° em jornada.
        """
        TEMPO_ATRASO_API = 2  # pequena conten√ß√£o para evitar floods
        NUM_MAX_TENTATIVAS = 3
        TEMPO_ATRASO_RETRIES = 5

        url = f"{WHATSAPP_API['HOST']}/helpdeskmonitor/api/whatsapp/send-by-function"
        headers = {
            'Authorization': f"Bearer {WHATSAPP_API['TOKEN']}",
            'Content-Type': 'application/json'
        }

        hostname = socket.gethostname()
        payload = {
            'funcao': 'EVENTOS',
            'mensagem': f"[{hostname}] {mensagem}",
            'origem': WHATSAPP_API.get('ORIGEM') or 'EVENTOS_FERIADOS',
            'apenas_disponiveis': apenas_disponiveis if apenas_disponiveis is not None else WHATSAPP_API.get('APENAS_DISPONIVEIS', True)
        }

        with self._lock_api_whatsapp:
            now = datetime.now()
            if self._tempo_ultima_chamada_whatsapp is not None:
                elapsed = (now - self._tempo_ultima_chamada_whatsapp).total_seconds()
                if elapsed < TEMPO_ATRASO_API:
                    time.sleep(TEMPO_ATRASO_API - elapsed)

            tentativa = 0
            while tentativa < NUM_MAX_TENTATIVAS:
                try:
                    logger.info(
                        f"Chamando API WhatsApp por fun√ß√£o: POST {url} | headers=Authorization: Bearer **** | payload={{{'funcao': 'EVENTOS', 'origem': payload['origem'], 'apenas_disponiveis': payload['apenas_disponiveis'], 'mensagem_len': {len(payload['mensagem'])}}}}"
                    )
                    resp = requests.post(url, json=payload, headers=headers, timeout=WHATSAPP_API.get('TIMEOUT', 30))
                    self._tempo_ultima_chamada_whatsapp = datetime.now()

                    # Log detalhado do resultado
                    conteudo_curto = (resp.text[:500] + '...') if len(resp.text) > 500 else resp.text
                    logger.info(
                        f"Resultado API WhatsApp por fun√ß√£o: status={resp.status_code} | ok={resp.ok} | resposta={conteudo_curto}"
                    )

                    if resp.ok:
                        return

                    # Em caso de status n√£o-OK, tenta novamente com backoff
                    tentativa += 1
                    if tentativa < NUM_MAX_TENTATIVAS:
                        logger.warning(f"Falha no envio (status {resp.status_code}). Nova tentativa em {TEMPO_ATRASO_RETRIES}s...")
                        time.sleep(TEMPO_ATRASO_RETRIES)
                except requests.RequestException as e:
                    tentativa += 1
                    logger.error(f"Erro na chamada da API WhatsApp por fun√ß√£o (tentativa {tentativa}/{NUM_MAX_TENTATIVAS}): {e}")
                    if tentativa < NUM_MAX_TENTATIVAS:
                        time.sleep(TEMPO_ATRASO_RETRIES)

    def enviar_email(self, email: str, mensagem: str) -> None:
        """
        Envia um e-mail usando o servidor SMTP configurado.
        
        Args:
            email (str): Endere√ßo de e-mail do destinat√°rio.
            mensagem (str): Conte√∫do da mensagem.
        """
        smtp_server = '172.17.120.1'
        smtp_port = 25
        from_email = 'automacao@tce.go.gov.br'
        subject = "Notifica√ß√£o de Evento - TCE-GO"

        # Converte quebras de linha para HTML
        mensagem_html = mensagem.replace('\n', '<br>')

        msg = MIMEMultipart()
        msg['From'] = from_email
        msg['To'] = email
        msg['Subject'] = subject
        msg.attach(MIMEText(mensagem_html, 'html'))

        try:
            server = smtplib.SMTP(smtp_server, smtp_port)
            server.sendmail(from_email, email, msg.as_string())
            logger.info(f"Email enviado com sucesso para {email}.")
        except Exception as e:
            logger.error(f"Erro ao enviar o email para {email}: {e}")
        finally:
            try:
                server.quit()
            except:
                pass
